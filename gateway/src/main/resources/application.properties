# Port on which the service will run
server.port=8080

#Mbart lang translator 
mbart.enabled=false

# Service name
spring.application.name=gateway-service


# Common configurations for all microservices and the gateway
# Add global settings such as server port, logging, etc.

# Define routes for Eng2Hindi microservice
spring.cloud.gateway.routes[0].id=eng2hindi
spring.cloud.gateway.routes[0].uri=lb://eng2hindi-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/tohindi/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

spring.cloud.gateway.default-filters[0].name=DedupeResponseHeader
spring.cloud.gateway.default-filters[0].args.Access-Control-Allow-Origin=Access-Control-Allow-Origin Access-Control-Allow-Credentials RETAIN_UNIQUE
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowed-origins=*
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowed-methods=*
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowed-headers=*
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allow-credentials=true


spring.cloud.gateway.default-filters[0].name=DedupeResponseHeader
spring.cloud.gateway.default-filters[0].args.Access-Control-Allow-Origin=Access-Control-Allow-Origin RETAIN_UNIQUE
spring.cloud.gateway.default-filters[0].args.Access-Control-Allow-Credentials=Access-Control-Allow-Credentials RETAIN_UNIQUE

spring.cloud.gateway.routes[0].metadata.cors.allowedOriginPatterns=*
#spring.cloud.gateway.routes[0].metadata.cors.allowedOrigins=*
spring.cloud.gateway.routes[0].metadata.cors.allowedMethods=*
spring.cloud.gateway.routes[0].metadata.cors.allowedHeaders=*
#spring.cloud.gateway.routes[0].metadata.cors.allowCredentials=1
#spring.cloud.gateway.routes[0].metadata.cors.maxAge="30"

# CORS configuration
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowedOrigins=*
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowedHeaders=*
#spring.cloud.gateway.globalcors.cors-configurations['[/**]'].allowCredentials=true


#Disable cors START

#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
#spring.cloud.gateway.routes[0].filters[1]=Cors
#spring.cloud.gateway.routes[0].filters[1].cors.allowed-origins=*
#spring.cloud.gateway.routes[0].filters[1].cors.allowed-methods=*
#spring.cloud.gateway.routes[0].filters[1].cors.allowed-headers=*
#spring.cloud.gateway.routes[0].filters[1].cors.max-age=3600


#spring.cloud.gateway.routes[0].predicates[0]=Path=/tohindi
#spring.cloud.gateway.routes[0].filters[0]=RewritePath=/tohindi, /
#spring.cloud.gateway.routes[0].filters[1]=Cors
#spring.cloud.gateway.routes[0].filters[1].allowedOrigins=*
#spring.cloud.gateway.routes[0].filters[1].allowedMethods=*
#spring.cloud.gateway.routes[0].filters[1].allowedHeaders=*
#spring.cloud.gateway.routes[0].filters[1].maxAge=3600
#spring.cloud.gateway.routes[0].uri=http://backend-service


#spring.mvc.cors.disable=true

#Disable cors END


# Define routes for Eng2French microservice
spring.cloud.gateway.routes[1].id=eng2french
spring.cloud.gateway.routes[1].uri=lb://eng2french-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/tofrench/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

# Define routes for Eng2Hebrew microservice
spring.cloud.gateway.routes[1].id=eng2german
spring.cloud.gateway.routes[1].uri=lb://eng2german-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/togerman/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

# Define routes for Eng2Hebrew microservice
spring.cloud.gateway.routes[1].id=eng2hebrew
spring.cloud.gateway.routes[1].uri=lb://eng2hebrew-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/tohebrew/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1


# Enable load balancing
spring.cloud.loadbalancer.ribbon.enabled=false
spring.cloud.loadbalancer.ribbon.client.name=eng2hindi-service,eng2french-service,eng2hebrew-service,eng2german-service
gateway.metrics.enabled=true

# Eureka Client configuration
eureka.client.service-url.default-zone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


#https://github.com/spring-cloud/spring-cloud-gateway/issues/2091
gateway.metrics.enabled=true
discovery.locator.enabled=true
discovery.locator.lower-case-service-id=true
eureka.instance.preferIpAddress=true
eureka.instance.prefer-ip-address=true


#CORS
# To resolve issue
# Spring MVC found on classpath, which is incompatible with Spring Cloud Gateway.
spring.main.web-application-type=reactive